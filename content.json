[{"title":"深刻探究Fragment的生命周期以及扩展","date":"2017-01-15T07:21:50.000Z","path":"2017/01/15/深刻探究Fragment的生命周期以及扩展/","text":"引言剖析Fragment的声明周期Fragmenty与Activity之间生命周期的关系 ##引言在Android3.0开始，Android引入了Fragment。当初最主要的目的是为了给大屏幕手持设备提供更加灵活和动态的UI设计。随着应用功能越来越多，界面越来越复杂，我们会利用Fragment对Activity的界面进行模块化编程。比如一个Activity界面内有多个请求，每个请求得到的结果展示不同的UI片段，那么我们就可以将Activity利用Fragment来完成UI模块化。目前在我目前的项目中，Fragment的地位已经举足轻重了。当然我写篇文章，并不是简单的介绍Fragment的用法，而是结合我在项目中使用Fragment所遇到的问题进行说明。 ##生命周期 onAttach(Activity) 调用一次的片段与其活性相关。 onCreate(Bundle) 所谓做片段的初始创建。 onCreateView(LayoutInflater, ViewGroup, Bundle) 创建并返回与片段相关联的视图层次。 onActivityCreated(Bundle)告诉它的活动已完成其自己的片段Activity.onCreate()。 onViewStateRestored(Bundle) 告诉所有的视图层次的保存状态已经恢复的片段。 onStart() 使该片段可见于用户（根据它含有活性被启动）。 onResume() 使得片段开始与用户交互（根据其含有的活性被收回）。 如不再被使用的一个片段，它通过一个反向串联回调： onPause() 片段不再与用户交互可能是因为它的活性被暂停或片段操作修改它的活动。 onStop() 片段不再对用户可见的或者是因为它的活性被停止或片段操作修改它的活动。 onDestroyView() 允许碎片清理与显示有关的资源。 onDestroy() 所谓做片段状态的最后的清理。 onDetach() 叫之前立即不再与它的活动相关联的片段。","tags":[{"name":"Android基础","slug":"Android基础","permalink":"//litten.me/tags/Android基础/"},{"name":"Fragment声明周期","slug":"Fragment声明周期","permalink":"//litten.me/tags/Fragment声明周期/"}]},{"title":"Hello World","date":"2017-01-14T09:39:00.000Z","path":"2017/01/14/hello-world/","text":"1/14/2017 6:54:11 PM 博客终于搭建起来了，虽然还不是很完美。好满足啊，手工打造一个属于自己博客。开心啊。 折腾了好久，在github page上看到自己的博客加载下来时，突然有种错综复杂的恍惚感。是的，它不是qq空间，不是新浪博客，不是豆瓣小站，也不是贴吧。它更像是属于自己的一块小小的领地，因而我满足于这种归属感。我愿在上面安静劳作。 一个农民，通过自身努力终于分到了一块地，不再需要在地主的土地上创造流量价值时，于是翻身作主的他可以宣告说：Hello World。","tags":[{"name":"杂谈","slug":"杂谈","permalink":"//litten.me/tags/杂谈/"},{"name":"octopress","slug":"octopress","permalink":"//litten.me/tags/octopress/"}]}]